{"ast":null,"code":"var _jsxFileName = \"/Users/syeniganti/Documents/GitHub/PetGoHome/FrotEnd/src/components/GoogleMaps/GoogleMap.js\";\nimport React, { Component } from \"react\";\nimport { Map, Marker, GoogleApiWrapper } from \"google-maps-react\";\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class MapContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = address => {\n      this.setState({\n        address\n      });\n    };\n\n    this.handleSelect = address => {\n      geocodeByAddress(address).then(results => getLatLng(results[0])).then(latLng => {\n        this.setState({\n          address\n        });\n        console.log(\"Success\", latLng);\n        this.setState({\n          mapCenter: latLng\n        });\n      }).catch(error => console.error(\"Error\", error));\n    };\n\n    this.state = {\n      address: \"\",\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n      mapCenter: {\n        lat: 37.3352,\n        lng: -121.8811\n      }\n    };\n  } // onMarkerClick = (props, marker, e) =>\n  //   this.setState({\n  //     selectedPlace: props,\n  //     activeMarker: marker,\n  //     showingInfoWindow: true,\n  //   });\n  // onMapClicked = (props) => {\n  //   if (this.state.showingInfoWindow) {\n  //     this.setState({\n  //       showingInfoWindow: false,\n  //       activeMarker: null,\n  //     });\n  //   }\n  // };\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"googleMap\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: \"40px\",\n          width: \"400px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n          value: this.state.address,\n          onChange: this.handleChange,\n          onSelect: this.handleSelect,\n          children: ({\n            getInputProps,\n            suggestions,\n            getSuggestionItemProps,\n            loading\n          }) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps({\n                placeholder: \"Search Places ...\",\n                className: \"location-search-input\"\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"autocomplete-dropdown-container\",\n              children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: \"Loading...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 31\n              }, this), suggestions.map(suggestion => {\n                const className = suggestion.active ? \"suggestion-item--active\" : \"suggestion-item\"; // inline style for demonstration purpose\n\n                const style = suggestion.active ? {\n                  backgroundColor: \"#fafafa\",\n                  cursor: \"pointer\"\n                } : {\n                  backgroundColor: \"#ffffff\",\n                  cursor: \"pointer\"\n                };\n                return /*#__PURE__*/_jsxDEV(\"div\", { ...getSuggestionItemProps(suggestion, {\n                    className,\n                    style\n                  }),\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: suggestion.description\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 92,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 86,\n                  columnNumber: 23\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Map, {\n        google: this.props.google,\n        initialCenter: {\n          lat: this.state.mapCenter.lat,\n          lng: this.state.mapCenter.lng\n        },\n        center: {\n          lat: this.state.mapCenter.lat,\n          lng: this.state.mapCenter.lng\n        },\n        children: /*#__PURE__*/_jsxDEV(Marker, {\n          position: {\n            lat: this.state.mapCenter.lat,\n            lng: this.state.mapCenter.lng\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyDKT5mLiGAU26aO5yCoHbQwHVOX2W5JHp0\"\n})(MapContainer);","map":{"version":3,"sources":["/Users/syeniganti/Documents/GitHub/PetGoHome/FrotEnd/src/components/GoogleMaps/GoogleMap.js"],"names":["React","Component","Map","Marker","GoogleApiWrapper","PlacesAutocomplete","geocodeByAddress","getLatLng","MapContainer","constructor","props","handleChange","address","setState","handleSelect","then","results","latLng","console","log","mapCenter","catch","error","state","showingInfoWindow","activeMarker","selectedPlace","lat","lng","render","marginBottom","width","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","className","map","suggestion","active","style","backgroundColor","cursor","description","google","apiKey"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Map, Marker, GoogleApiWrapper } from \"google-maps-react\";\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from \"react-places-autocomplete\";\n\nexport class MapContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      address: \"\",\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n      mapCenter: {\n        lat: 37.3352,\n        lng: -121.8811,\n      },\n    };\n  }\n\n  // onMarkerClick = (props, marker, e) =>\n  //   this.setState({\n  //     selectedPlace: props,\n  //     activeMarker: marker,\n  //     showingInfoWindow: true,\n  //   });\n\n  // onMapClicked = (props) => {\n  //   if (this.state.showingInfoWindow) {\n  //     this.setState({\n  //       showingInfoWindow: false,\n  //       activeMarker: null,\n  //     });\n  //   }\n  // };\n  handleChange = (address) => {\n    this.setState({ address });\n  };\n\n  handleSelect = (address) => {\n    geocodeByAddress(address)\n      .then((results) => getLatLng(results[0]))\n      .then((latLng) => {\n        this.setState({ address });\n        console.log(\"Success\", latLng);\n        this.setState({ mapCenter: latLng });\n      })\n      .catch((error) => console.error(\"Error\", error));\n  };\n\n  render() {\n    return (\n      <div id=\"googleMap\">\n        <div style={{ marginBottom: \"40px\", width: \"400px\" }}>\n          <PlacesAutocomplete\n            value={this.state.address}\n            onChange={this.handleChange}\n            onSelect={this.handleSelect}\n          >\n            {({\n              getInputProps,\n              suggestions,\n              getSuggestionItemProps,\n              loading,\n            }) => (\n              <div>\n                <input\n                  {...getInputProps({\n                    placeholder: \"Search Places ...\",\n                    className: \"location-search-input\",\n                  })}\n                />\n                <div className=\"autocomplete-dropdown-container\">\n                  {loading && <div>Loading...</div>}\n                  {suggestions.map((suggestion) => {\n                    const className = suggestion.active\n                      ? \"suggestion-item--active\"\n                      : \"suggestion-item\";\n                    // inline style for demonstration purpose\n                    const style = suggestion.active\n                      ? { backgroundColor: \"#fafafa\", cursor: \"pointer\" }\n                      : { backgroundColor: \"#ffffff\", cursor: \"pointer\" };\n                    return (\n                      <div\n                        {...getSuggestionItemProps(suggestion, {\n                          className,\n                          style,\n                        })}\n                      >\n                        <span>{suggestion.description}</span>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            )}\n          </PlacesAutocomplete>\n        </div>\n\n        <Map\n          google={this.props.google}\n          initialCenter={{\n            lat: this.state.mapCenter.lat,\n            lng: this.state.mapCenter.lng,\n          }}\n          center={{\n            lat: this.state.mapCenter.lat,\n            lng: this.state.mapCenter.lng,\n          }}\n        >\n          <Marker\n            position={{\n              lat: this.state.mapCenter.lat,\n              lng: this.state.mapCenter.lng,\n            }}\n          />\n        </Map>\n      </div>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyDKT5mLiGAU26aO5yCoHbQwHVOX2W5JHp0\",\n})(MapContainer);\n"]},"metadata":{},"sourceType":"module"}